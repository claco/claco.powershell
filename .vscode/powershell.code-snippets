{
    // Place your claco.powershell workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Cmdlet: Simple": {
        "scope": "powershell",
        "prefix": "cmdlet-simple",
        "description": "Creates a new simple cmdlet",
        "body": [
            "<#",
            "    .SYNOPSIS",
            "    A simple example function demonstrating the use of common parameters like -WhatIf and -Confirm.",
            "",
            "    .DESCRIPTION",
            "    The ${1:Invoke}-${2:Action} function is a basic example that showcases how to implement common parameters such",
            "    as -WhatIf and -Confirm in a PowerShell function. It includes error handling and debug messages to illustrate best practices.",
            "",
            "    .PARAMETER Force",
            "    A switch parameter that, when specified, forces the operation to proceed without prompting for confirmation.",
            "",
            "    .INPUTS",
            "    None. You cannot pipe objects to ${1:Invoke}-${2:Action}.",
            "",
            "    .OUTPUTS",
            "    None. This function does not generate any output.",
            "",
            "    .EXAMPLE",
            "    ${1:Invoke}-${2:Action}",
            "    ${1:Invoke}-${2:Action} -Confirm",
            "    ${1:Invoke}-${2:Action} -Debug",
            "    ${1:Invoke}-${2:Action} -Force",
            "    ${1:Invoke}-${2:Action} -Verbose",
            "    ${1:Invoke}-${2:Action} -WhatIf",
            "#>",
            "function ${1:Invoke}-${2:Action} {",
            "    [CmdletBinding(SupportsShouldProcess, ConfirmImpact = 'None')]",
            "    [OutputType([void])]",
            "    param (",
            "        [switch] \\$Force",
            "    )",
            "",
            "    try {",
            "        Write-DebugFunctionStart",
            "",
            "        if (\\$Force -and -not \\$PSBoundParameters.ContainsKey('Confirm')) {",
            "            \\$ConfirmPreference = 'None'",
            "        }",
            "",
            "        Write-Debug \"ConfirmPreference=\\$ConfirmPreference\"",
            "        Write-Debug \"WhatIfPreference=\\$WhatIfPreference\"",
            "",
            "        if (\\$PSCmdlet.ShouldProcess('Invoke-Example', 'Call')) {",
            "            Write-Host 'Running ${1:Invoke}-${2:Action}...' -ForegroundColor DarkGreen",
            "        }",
            "    } catch {",
            "        Write-Exception",
            "    } finally {",
            "        Write-DebugFunctionEnd",
            "    }",
            "",
            "    return",
            "}",
            "",
            "Export-ModuleMember -Function ${1:Invoke}-${2:Action}"
        ]
    },
    "Cmdlet: Pipeline": {
        "scope": "powershell",
        "prefix": "cmdlet-pipeline",
        "description": "Creates a new pipeline cmdlet",
        "body": [
            "<#",
            "    .SYNOPSIS",
            "    A simple example function demonstrating the use of pipeline processing.",
            "",
            "    .DESCRIPTION",
            "    The ${1:Invoke}-${2:PipelineAction} function is a basic example that showcases how to implement pipeline processing in",
            "    a PowerShell function. It includes error handling and debug messages to illustrate best practices.",
            "",
            "    .PARAMETER Path",
            "    A path, or list of paths to process. Defaults to `\\$PWD`",
            "",
            "    .INPUTS",
            "    String (Path)",
            "    Property of type Object (Path)",
            "",
            "    .OUTPUTS",
            "    String",
            "",
            "    .EXAMPLE",
            "    ${1:Invoke}-${2:PipelineAction}",
            "    ${1:Invoke}-${2:PipelineAction} -Path \\$PWD",
            "    ${1:Invoke}-${2:PipelineAction} -Path Modules,Tests",
            "    @('Modules', 'Tests') | ${1:Invoke}-${2:PipelineAction}",
            "#>",
            "function ${1:Invoke}-${2:PipelineAction} {",
            "    [CmdletBinding(SupportsShouldProcess, ConfirmImpact = 'None')]",
            "    [OutputType([PSCustomObject[]])]",
            "    param (",
            "        [Parameter(Position = 0, ValueFromPipeline, ValueFromPipelineByPropertyName)]",
            "        [SupportsWildcards()]",
            "        [ValidateScript({ \\$_.Count -gt 0 })]",
            "        [string[]] \\$Path = \\$PWD",
            "    )",
            "",
            "    begin {",
            "        Write-DebugFunctionStart",
            "",
            "        Write-Host 'Running ${1:Invoke}-${2:PipelineAction}...' -ForegroundColor DarkGreen",
            "",
            "        [PSCustomObject[]] \\$Results = @()",
            "    }",
            "",
            "    process {",
            "        try {",
            "            foreach (\\$ProcessingPath in \\$Path) {",
            "                if (\\$PSCmdlet.ShouldProcess(\\$ProcessingPath, 'Process''${1:Invoke}-${2:PipelineAction}')) {",
            "",
            "                    Write-Host \"Processing '\\$ProcessingPath'...\" -ForegroundColor Magenta -NoNewline",
            "",
            "                    \\$Result = [PSCustomObject]@{",
            "                        Input  = \\$ProcessingPath",
            "                        Path   = \\$ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath(\\$ProcessingPath)",
            "                        Exists = Test-Path -Path \\$ProcessingPath",
            "                    }",
            "",
            "                    if (\\$Result.Exists) {",
            "                        Write-Host 'Exists!' -ForegroundColor Green",
            "                    } else {",
            "                        Write-Host 'Not Found!' -ForegroundColor Yellow",
            "                    }",
            "",
            "                    \\$Results += \\$Result",
            "                }",
            "            }",
            "        } catch {",
            "            Write-Host 'Processing failed unexpectedly!' -ForegroundColor Red",
            "",
            "            Write-Exception",
            "        }",
            "    }",
            "",
            "    end {",
            "        Write-DebugFunctionEnd",
            "",
            "        return [PSCustomObject[]] \\$Results",
            "    }",
            "}",
            "",
            "Export-ModuleMember -Function ${1:Invoke}-${2:PipelineAction}"
        ],
    }
}
